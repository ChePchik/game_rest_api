const express = require("express");
const bodyParser = require("body-parser");
const jwt = require("jsonwebtoken");
const fs = require("fs");
const app = express();
const PORT = 3000;

app.use(bodyParser.json());

// –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è JWT
const SECRET_KEY = "your_secret_key";
const USERS_FILE = "./users.json";

// –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—É–Ω–¥—É–∫–∞
let chest = 2;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
function generateRandomCoordinates() {
	const x = Math.floor(Math.random() * 1000); // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã X
	const y = Math.floor(Math.random() * 1000); // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã Y
	return { x, y };
}
// –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–∞—Å—Å–∏–≤ –Ω–∞ –º–∞—Å—Å–∏–≤
function isArraySubset(subset, superset) {
	return subset.every((element) => superset.includes(element));
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
function loadUsers() {
	if (fs.existsSync(USERS_FILE)) {
		return JSON.parse(fs.readFileSync(USERS_FILE, "utf-8"));
	}
	return [];
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
function saveUsers(users) {
	fs.writeFileSync(USERS_FILE, JSON.stringify(users, null, 2));
}

// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –∏–∑ –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä
function generateRandomWord(length) {
	const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
	let result = "";
	for (let i = 0; i < length; i++) {
		result += chars.charAt(Math.floor(Math.random() * chars.length));
	}
	return result;
}

let users = loadUsers();

function GameEnd(req, res, next) {
	// const user = users.find((u) => u.username === req.user.username);
	console.log("üöÄ ~ GameEnd ~ req.user:", req.user);
	// console.log("üöÄ ~ GameEnd ~ user:", user);

	// –ï—Å–ª–∏ –∂–∏–∑–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 0 –∏–ª–∏ –º–µ–Ω—å—à–µ
	// if (user && user.lives <= 0) {
	// 	return res.status(400).json({ message: "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –£ –≤–∞—Å –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∂–∏–∑–Ω–µ–π." });
	// }

	// –ï—Å–ª–∏ –∂–∏–∑–Ω–µ–π –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
	next();
}
// app.use();

// –ú–∏–¥–¥–ª–≤–∞—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function authenticateToken(req, res, next) {
	const authHeader = req.headers["authorization"];
	const token = authHeader && authHeader.split(" ")[1];

	if (!token) return res.status(401).json({ message: "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏" });

	jwt.verify(token, SECRET_KEY, (err, user) => {
		if (err) return res.status(403).json({ message: "–û—à–∏–±–∫–∞ " || err.message });
		req.user = user;
		next();
	});
}

// –ú–∏–¥–¥–ª–≤–∞—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
function checkProgress(requiredProgress) {
	console.log("üöÄ ~ checkProgress ~ requiredProgress:", requiredProgress);
	return (req, res, next) => {
		const user = users.find((u) => u.username === req.user.username);
		if (!user) return res.sendStatus(403);

		// console.log("üöÄ ~ return ~ user.progress:", user.progress);
		// console.log("üöÄ ~ return ~ requiredProgress:", requiredProgress);
		if (user.progress !== requiredProgress) {
			return res
				.status(400)
				.json({ message: "–í—ã –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–¥–∞–Ω–∏—è –ø–µ—Ä–µ–¥ —ç—Ç–∏–º!" });
		}
		next();
	};
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post("/register", (req, res) => {
	const { username, password } = req.body;
	if (!username || !password) {
		return res
			.status(400)
			.json({ message: "username –∏ password –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–ª–µ –æ—Ç–≤–µ—Ç–∞!" });
	}

	if (users.some((u) => u.username === username)) {
		return res.status(400).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!" });
	}

	const newUser = { username, password, progress: 0, lives: 3 };
	users.push(newUser);
	saveUsers(users);

	res.status(201).json({ message: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤—ã–≤–∞–π—Å—è" });
});

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post("/login", (req, res) => {
	const { username, password } = req.body;
	const user = users.find((u) => u.username === username && u.password === password);

	if (!user) {
		return res.status(401).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" });
	}

	const token = jwt.sign({ username: user.username }, SECRET_KEY);
	res.json({ token });
});

// –ú–∞—Ä—à—Ä—É—Ç—ã –∏–≥—Ä—ã
app.get("/map", authenticateToken, checkProgress(0), (req, res) => {
	const user = users.find((u) => u.username === req.user.username);
	// console.log("üöÄ ~ app.get ~ user:", user);
	// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
	const { x, y } = generateRandomCoordinates();

	// –ó–∞–ø–∏—Å—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user.coordinates = { x, y };
	user.progress++;
	saveUsers(users);
	// –û—Ç–≤–µ—Ç —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
	res.json({
		message: "–í—ã –Ω–∞—à–ª–∏ –∫–∞—Ä—Ç—É —Å–æ–∫—Ä–æ–≤–∏—â! –¢–µ–ø–µ—Ä—å –Ω–∞–¥–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è —Ç—É–¥–∞.",
		coordinates: `X: ${x}, Y: ${y}`,
	});
});

// –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞—Ä—Ç–µ
app.get("/go/map", authenticateToken, checkProgress(1), (req, res) => {
	const user = users.find((u) => u.username === req.user.username);

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
	const { x: x_new, y: y_new } = req.query;
	if (!x_new || !y_new) {
		user.lives--;
		saveUsers(users);
		res
			.status(401)
			.json({ message: "–¢—ã —Å–æ–≤–µ—Ä—à–∏–ª –æ—à–∏–±–∫—É! –¢–≤–æ—è –∂–∏–∑–Ω—å –Ω–∞ –≥—Ä–∞–Ω–∏.", lives: user.lives });
	}

	const { x, y } = user.coordinates;
	if (x_new == x && y_new == y) {
		user.progress++;
		res.status(200).json({ message: `–í—ã –Ω–∞—à–ª–∏ —Å—É–Ω–¥—É–∫ —Å–æ–∫—Ä–æ–≤–∏—â! –¢–µ–ø–µ—Ä—å –Ω–∞–¥–æ –æ—Ç–∫—Ä—ã—Ç—å –µ–≥–æ.` });
	} else {
		user.lives--;
		saveUsers(users);
		res
			.status(401)
			.json({ message: "–¢—ã —Å–æ–≤–µ—Ä—à–∏–ª –æ—à–∏–±–∫—É! –¢–≤–æ—è –∂–∏–∑–Ω—å –Ω–∞ –≥—Ä–∞–Ω–∏.", lives: user.lives });
	}
});

// –û—Ç–∫—Ä—ã—Ç—å —Å—É–Ω–¥—É–∫
app.post("/chest/open", authenticateToken, checkProgress(2), (req, res) => {
	console.log("üöÄ ~ app.post ~ chest:", chest);
	const user = users.find((u) => u.username === req.user.username);

	// const { password } = req.body;
	// if (password === user.answer) {
	// 	const user = users.find((u) => u.username === req.user.username);
	// 	res.json({
	// 		message: "–°—É–Ω–¥—É–∫ –æ—Ç–∫—Ä—ã—Ç!",
	// 		artifact: "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ –¥—Ä–µ–≤–Ω–∏–π –∏ –º–æ–≥—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç!",
	// 		route: "–ü–æ—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –Ω–∞ –∫–æ—Ä–∞–±–ª—å.",
	// 	});
	// 	user.progress++;
	// 	saveUsers(users);
	// } else {
	res.json({
		message: "–°—É–Ω–¥—É–∫ –≤—Å—ë –µ—â—ë –∑–∞–∫—Ä—ã—Ç! –ö–ª—é—á –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞—Ä–æ–π –±–∞—à–Ω–µ(–ò–º. –ø–∞–¥–µ–∂, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª).",
	});
	user.progress++;
	saveUsers(users);

	// user.lives--;
	// saveUsers(users);
	// res.status(401).json({ message: "–ù–µ –≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å! –¢–≤–æ—è –∂–∏–∑–Ω—å –Ω–∞ –≥—Ä–∞–Ω–∏.", lives: user.lives });
	// }
});

// –æ–±–Ω–æ–≤–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç
app.put("/map/update", authenticateToken, checkProgress(3), (req, res) => {
	const { new_route } = req.body;
	if (new_route && new_route == "—Å—Ç–∞—Ä–∞—è –±–∞—à–Ω—è") {
		const user = users.find((u) => u.username === req.user.username);
		res.json({ message: "–ú–∞—Ä—à—Ä—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!", route: "GET /interact?id=1" });
		user.progress++;
		saveUsers(users);
	} else {
		res.status(401).json({ message: "–ù–µ–æ–±—Ö–æ–¥–∏–º —É–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç(new_route)!" });
	}
});

// –ó–∞–≥–∞–¥–∫–∞
app.get("/interact", authenticateToken, checkProgress(4), (req, res) => {
	const user = users.find((u) => u.username === req.user.username);
	const { id } = req.query;

	if (id && id == 1) {
		res.json({
			message: "–í—ã –ø–æ–¥–æ—à–ª–∏ –∫ —Å—Ç–∞—Ä–æ–π –±–∞—à–Ω–µ. –ù–∞ –¥–≤–µ—Ä–∏ –≤—ã–±–∏—Ç—ã —Å–∏–º–≤–æ–ª—ã, –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ –∑–∞–≥–∞–¥–∫—É.",
			hint: "–†–µ—à–∏—Ç–µ –∑–∞–≥–∞–¥–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–æ–ª—å –æ—Ç —Å—É–Ω–¥—É–∫–∞.",
			mystery: "",
		});
		user.progress++;
		saveUsers(users);
	} else {
		user.lives--;
		saveUsers(users);
		res.status(401).json({
			message: "–¢—ã –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è –∏ –ø–æ–ø–∞–ª –≤ —Ä–∞–∑–≤–∞–ª–∏–≤–∞—é—â—É—é—Å—è –±–∞—à–Ω—é! –¢–µ–±—è –ø—Ä–∏–¥–∞–≤–∏–ª–æ –∫–∞–º–Ω–µ–º.",
			lives: user.lives,
		});
	}
});

// –†–∞–∑–≥–∞–¥–∫–∞ –∑–∞–≥–∞–¥–∫–∏
app.post("/solve", authenticateToken, checkProgress(5), (req, res) => {
	const user = users.find((u) => u.username === req.user.username);
	const { answer } = req.body;

	if (answer) {
		const answer = generateRandomWord(8);
		res.json({
			message: "–î–≤–µ—Ä—å –±–∞—à–Ω–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è, –∏ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ —Å–≤–∏—Ç–æ–∫ —Å –ø–∞—Ä–æ–ª–µ–º:...",
			password: answer,
			// advice: "–£ –≤–∞—Å –æ–¥–∏–Ω –Ω–µ–ø—Ä—á–∏—Ç–∞–Ω–Ω—ã–π —Å–æ–≤–µ—Ç",
		});
		user.answer = answer;
		user.progress++;
		chest = 6;
		saveUsers(users);
	} else {
		res.status(404).json({
			message: "–ù–µ –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç. –ñ–¥—É –æ—Ç —Ç–µ–±—è answer",
			danger: "–¢–≤–æ—ë –≤—Ä–µ–º—è –Ω–∞ –∏—Å—Ö–æ–¥–µ",
		});
	}
});

// –û—Ç–∫—Ä—ã—Ç—å —Å—É–Ω–¥—É–∫
app.put("/chest/open", authenticateToken, checkProgress(6), (req, res) => {
	console.log("üöÄ ~ app.post ~ chest:", chest);
	const user = users.find((u) => u.username === req.user.username);

	const { password } = req.body;
	if (password === user.answer) {
		const user = users.find((u) => u.username === req.user.username);
		res.json({
			message: "–°—É–Ω–¥—É–∫ –æ—Ç–∫—Ä—ã—Ç!",
			artifact: "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ –¥—Ä–µ–≤–Ω–∏–π –∏ –º–æ–≥—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç!",
			treasure: "–ù–∞–¥–æ –∑–∞–±–∞—Ä—Ç—å –≤—Å–µ —Å–æ–∫—Ä–æ–≤–∏—â–∞",
			// route: "–ü–æ—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –Ω–∞ –∫–æ—Ä–∞–±–ª—å.",
		});
		user.progress++;
		saveUsers(users);
	} else {
		res.json({
			message: "–°—É–Ω–¥—É–∫ –≤—Å—ë –µ—â—ë –∑–∞–∫—Ä—ã—Ç! –ö–ª—é—á –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞—Ä–æ–π –±–∞—à–Ω–µ(–ò–º. –ø–∞–¥–µ–∂, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª).",
		});
		user.progress++;
		saveUsers(users);

		// user.lives--;
		// saveUsers(users);
		// res.status(401).json({ message: "–ù–µ –≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å! –¢–≤–æ—è –∂–∏–∑–Ω—å –Ω–∞ –≥—Ä–∞–Ω–∏.", lives: user.lives });
	}
});

// —Å–æ–±—Ä–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã
app.patch("/resources/add", authenticateToken, checkProgress(7), (req, res) => {
	const user = users.find((u) => u.username === req.user.username);
	const resurces = ["–∑–æ–ª–æ—Ç–æ", "—Å–µ—Ä–µ–±—Ä–æ", "–æ—Ä—É–∂–∏–µ"];
	const { resources } = req.body;

	if (resources && typeof resources == "object" && isArraySubset(resurces, resources)) {
		res.json({
			message: "–í—Å–µ —Ä–µ—Å—É—Ä—Å—ã —Å–æ–±—Ä–∞–Ω—ã!",
			route: "–ü–æ—Ä–∞ –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ –∫–æ—Ä–∞–±–ª—å. –ü—Ä–æ–≤–µ—Ä—å —Å—Ç–∞—Ç—É—Å. —ç–∫–∏–ø–∞–∂–∞",
		});
		user.progress++;
		saveUsers(users);
	} else {
		res.status(401).json({ message: "–ï—â—ë –Ω–µ –≤—Å—ë —Å–æ–∫—Ä–æ–≤–∏—â–µ —Å–æ–±—Ä–∞–Ω–æ!", resources: resurces });
	}
});

// –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
app.get("/crew/status", authenticateToken, checkProgress(8), (req, res) => {
	const user = users.find((u) => u.username === req.user.username);
	res.json({
		message: "–≠–∫–∏–ø–∞–∂ –≤ –ø–æ—Ä—è–¥–∫–µ, –≥–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é!",
		attack: "–ü–æ –ø—É—Ç–∏ –≤—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ –≤—Ä–∞–≥–æ–≤!",
	});
	user.progress++;
	saveUsers(users);
});

// —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –≤—Ä–∞–≥–∞
app.delete("/route/enemy", authenticateToken, checkProgress(9), (req, res) => {
	const user = users.find((u) => u.username === req.user.username);
	user.progress++;
	saveUsers(users);
	res.json({ message: `–í—Ä–∞–≥ —É–Ω–∏—á—Ç–æ–∂–µ–Ω!` });
});

// app.post("/riddle/answer", authenticateToken, checkProgress(7), (req, res) => {
// 	const { answer } = req.body;
// 	if (answer === "parrot") {
// 		const user = users.find((u) => u.username === req.user.username);
// 		res.json({ message: "–í–µ—Ä–Ω–æ! –ó–∞–≥–∞–¥–∫–∞ —Ä–∞–∑–≥–∞–¥–∞–Ω–∞." });
// 		user.progress++;
// 		saveUsers(users);
// 	} else {
// 		res.status(400).json({ message: "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!" });
// 	}
// });

// app.get("/treasure", authenticateToken, checkProgress(8), (req, res) => {
// 	const user = users.find((u) => u.username === req.user.username);
// 	res.json({ message: "–°–æ–∫—Ä–æ–≤–∏—â–µ –Ω–∞–π–¥–µ–Ω–æ! –≠—Ç–æ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –ó–æ–ª–æ—Ç–æ–π –Ø–∫–æ—Ä—å." });
// 	user.progress++;
// 	saveUsers(users);
// });

app.post("/journey/end", authenticateToken, checkProgress(10), (req, res) => {
	const { status } = req.body;
	// treasure
	if (status === "success") {
		const user = users.find((u) => u.username === req.user.username);
		res.json({ message: "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –∏ —Å—Ç–∞–ª–∏ –ª–µ–≥–µ–Ω–¥–æ–π." });
		// user.progress = 0; // –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã
		// saveUsers(users);
	} else {
		res.status(400).json({ message: "–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è!" });
	}
});

app.listen(PORT, () => {
	console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});
